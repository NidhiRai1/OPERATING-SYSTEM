DUE TO THREAD LOCK , MUTUAL EXCLUSION THEIR IS ABUG ARISES CALLED DEADLOCK

WE CAN SAY THAT IN SYYSTEM THEIR AREA LOTS OF RESOURCE , AND TO USE THEM PROCESSES AND THREADS ARE COMPETTING IN MUTUALLY EXCLUSIVE WAY

DEADLOCK - 2 OR MORE PROCESS ARE WAITING FOR RESOURCE AVAILABLILITY WHICH WILL NEVER AVAILABLE i.e BUSY WITH SOMEOTHER PROCESS

//HOW PROCESS/THREAD UTILIZE A RESOURCE 
1.REQUEST - FOR RESOURCE 
2. USE - CHECK THE AVAILIBLE - (LOACK AVAILABLE OR NOT ) 
3.RELEASE WHEN THAT USE BY THAT THREAD BY MAKING IT UNLOCK FOR OTHER THREAD/PROCESS

//CONDITION FOR DEADLOCK(SIMULTENIOUSLLY TRUE ALL THE CONDITION)
1.MUTUAL EXCLUSION - (EK BAR ME EK HI TREAD /PROCESS USE KREGI KOI V RESOURCE)
2.HOLD & WAIT - (
3.NO PREUMTION - (UNTILL TREAD / PROCESS COMPLETE THEIR EXECUTION NO OTHER THREAD CAN'T ACCESS THAT RESOURCE)
4.CIRCULAR WAIT - WAITING IS IN KIND OF CIRCULAR FASHION 

//DEADLOCK DETECTION :- 
1,SINGLE INSTANCE OF EACH RESOURSE :- WAIT FOR GRAPH SE RESOURSE AND PROCESS KI EDGES HTAA DETI H P1 WAITING FOR THAT RESOURSE THAT  IS WAITING FO RP2 AND VISE VERSA 
IF CYCLE IS FORMED THEN THEN DEADLOCK
2.MULTIPLE INSTANCE :- WITH TEH HELP OF BANKER ALLOGRITHUM IF WE FIND SAFE SEQUENCE THEN NO DL ELSE THEIR IS A DL

//DEADLOCK RECOVERY :- 
1.PROCESS TERMINATION - ABOT ALL THE DL OR ABOT ONE PROCESS(LESS PRIVORITY ) AT A TIME UNTLI THEN DL CYCLE GOT RLIMINATED
2.RESOURCE PREMPTION :- WE PREMPT SOME RESOURSES FROM THE PROCESS AND GIVE IT OT THE OYJER PROCESS TO AVOID DL


//RESOURCE ALLOCATION GRAPH - IT'S LIKE A GRAPH 
VERTEX - PROCESS AND RESOURCE VERTEX
EDGES - ASSIGNE AND REQUEST EDGE  USE FOR GRAPHICAL REPRESANTATION 


//ISOLATION AND MEMEORY PROTECTION:-OS VIRTUAL MEMORY(LOGICAL MEMEORY) KO ALLOCATE KRTA H PHYSICAL ADDRESS SPACE(IN MAIN MEMORY) ME 
      FOR ISOLATION OS HAS TO STORE BASE AND OFFSET WITH THE HELP OF THESE OS GETS THAT IN THE PHYSICAL 
SPACE THE ALLOCATED ADDRESS FOR PROCESS IS IN RANGE OF BASE , MAX BOUND ADDRESS ASIGN 
  BSE STORE IN RELOCATION REGISTER AND CHANGE THROUGH CONTEXT SWITCHING


//ALLOCATION IN PHYSICAL MEMORY
1.CONTEGIOUS MEMORY ALOCATION :- PROCESS ARE PUTTED IN THE CONTINUAS AMNNER IN THE PHYSICAL MEMORY 
A. FIXED PARTITIONING IN RAM OF EQUAL SIZING TAKI PROCESS KO ALLOCATE KRPAYE

//THESE PARTATIONING CAUSE :-
*INTERNNAL FRAGMENTATION - HAAR PARTITION KE ANDAR V FRAGMENTATION H 
*EXTERNAL FRAGMENTATION - SARE PARTATION KO COMBINE KRO TO V THEIR IS FRAGMENTATION
   *COZ OF WHICH WE CAN'T USE SPACE IN OPTIMIZED WAY
*DEGREE OF MUTLI PROGRAMMING(NO. OF PROCESS ) IS KESS

B. DYNAMIC PARTITIONING - EK PARTITIONING KITE SIZE KI H WO FIX NI HOTI ACCORDING TO OUR NEED WE ADJUST THE SIZE IN THE CONTINOUS  FRAGMENTTION
  IT'S BETTER THEN FIXED PARTITIONING 

//LIMITATION 
EXTERNAL FRAGMENTATION 



//DEFRAGMENTATION :- FREE SPACE EK SIDE PE AND ALL THE ALLICATION ARE AT ONE SIDE DONE BY OS BUT USER DON'T KNOW 
ABOUT IT , BUT DEFRAGMENTATION MAKE THE PERFORMANCE OF THE SYSTEM LESS AND IT;S ATIME CONSUMING PROCESS

//ALLOCATION IN FREE SPACES OF HOLE 
1, FIRST FIT :- 10 -> 100 -> 90 -> NULL , FIRST HOLE  THAT ABLE TO ALLOCATE THIS 90 THEN FREE SPACE 
10 -> 10 -> 90 -> NULL 

//ADVANTAGES :- FAST , EASY TO IMPLEMENT
2.NEXT FIT ;- FOR 5 IS F'S OF ABOVE 10 -> 5 -> 90 -> NILL
//ADVANTAGES :- FAST
3.BEST FIT :- SMALLEST HOLE WHICH IS BIG ENOUGH :- 10 -> 1000 -> 90 -> NULL   ALLOCATE 90 THEN F.S 10 ->100 -> NULL
//ADVANTAGES :- LOW INTERNAL FRAGMENTATION  AND IT'S SLOW  &&& CREAT MAJOR EXTERNAL FRAGMENTATION (DISADV)
4.WORST FIR - LARGEST HOLE WHICH IS BIG ENOUGH FOR 90 IN 10 -> 200 -> 90 -> NULL THEN F.S 10 -> 110 -> 90 -> NULL
 //ADVANTAGES :- LOW EXTERNAL FRAGMENTATION 
BUT SLOW AND MAJOR INTERNAL FRAGMENTATION


//PAGING :- IT IS THE ALLOCATION OF PROCESS AFTER FIXED PARTITIONING INTO PHYSICAL ADDRESS SPCAE IN NON - CONTEGIOUS MANNER
DIVIDE THE PROCESS IN LOGICAL ADDRESS SPACE WHICH NEED THE FIXED PPARTITIONING IN THE PHYSICAL SPACE PAGE SIZE == FRAM SIZE
    PAGE IS THE PARTITION IN THE LOGICAL ADDRESS SPACE 
FRAM IS THE PARTITION IN THE PHYSICAL ADDRESS SPACE

ADVANTAGES - IT REMOVE EXTERNAL FRAGMENTATION

//MMU MANAGMENT - DO TRANSLATION FROM LOGICAL TO PHYSICAL ADDRESS SPACE
LOGICAL ADDRESS SPACE OFFSET = PHYSICAL ADDRESS SPACE OFFSET
IN TOTAL 64 BITS SPACE NEEDED TO BE DIVIDED INTO PAGES 64 = 2^6 SO THEY NEED 2 SPCES FROM RIGHT TO REPRESENT THE BASE 
FOR 25 = 011001 FROM RIGHT 010000 = 16 IS THE BASE  AND REMANING 1001 = 9 IS THE OFFSET FOR LOGICAL ADDRESSING 

AND WITH THE HELP OF PAGE TABLE WE GET THE FRAM NUMBER CORRESPONDING TO BE PAGE NUMBER

PAGING GOT SLOW DUE TO OVERHEAD LOGICAL ADDRESS SE PHYSICAL ADDRESS ME JANE KE LIYE PHLE PAGE TABLE PE 
JAO THEN WAHA SE OFFSET ADD KRKE U REACH AT THE EXACT LOACTION IN PHYSICAL ADDRESS

//SOT OT MAKE THE PAGING FAST U NEED ---- 
*TRASLATION LOOK(TLB) - ASIDE BUFFER - IT IS A HARDWARE CACHE , HIGH SPEED MEMORY WHICH HOLD KEY VALUE PAIR
  TLB KA ACCESS TIME MEMORY SE V KM H OR PAGE TABLE  MEMORY ME HOTA H TOH USKO ACCESS KENR SE OVERHEAD AATA THAT'S WHY CACHE MEMORY IS BETTER
EK BAAR PAGE TABLE SE ENTRY LEKE USE TLB ME PAGE KE CORRESPONDING FRAM NO. ADD KRDO TAKI AAGE KE SAME PAGE NO. 
KE LIYE CACHE TLB SE CHIZE LE KR KAM KRSKE SO PAGING GOT FAST IN THIS WAY
AND AFTER EVERY CONTEXT SWITCHING YOU NEED TO CHANGE/DELETE THE ENTRY IN THE TLB AS WELL

THIS PROBLEM CAN BE RESOLVED BY :-
1. FLASH THE TLB AFTER CONTEXT SWITCHING(IT IS FAST) IT'S NOT APPROPRIATE COZ RESET IN CACHE IS ITSELF COSTLY
2.ADD UNIQUE IDENTIFIER THAT WILL INDENTIFY NEW PROCESS

//WHEN THE LOGICAL ADDRESS IS DIVIDED IN THE SPACE OF 2 EACH APGE AND WE WANT TO ADD SIZE OF 4 THEN WE USE DYNAMIC DIVISION
 MMU DO TRANSLETION BUT WITH THE HELP OF SEGMENTATION TABLE WITH ONE COLOUM SEGMENT NO.(S) AND OTHER ONE IS OFFSET(D)


//ADVANTAGE :- 
1.NO INTERNAL FRAGMENTATION 
2. EFFECIENT 
3. SIZE OF SEGMENTATION TABLE IS LESS THAN THE SIZE OF PAGE ATBLE

//DISADVANTAGES :-
EXTERNAL FRAGMENTATION



